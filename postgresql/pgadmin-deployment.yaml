apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-credentials
  namespace: postgres
  annotations:
    kubernetes.io/description: "pgAdmin web interface credentials"
type: Opaque
stringData:
  email: "admin@example.com"
  password: "SecurePgAdminPass!42!"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  namespace: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: postgres
  labels:
    app: pgadmin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      securityContext:
        fsGroup: 5050
        fsGroupChangePolicy: OnRootMismatch
      initContainers:
      - name: pgadmin-init
        image: dpage/pgadmin4:8.11
        command: ["/bin/sh","-lc"]
        args:
          - |
            set -e
            chown -R 5050:5050 /var/lib/pgadmin
        securityContext:
          runAsUser: 0
          allowPrivilegeEscalation: true
        volumeMounts:
        - name: pgadmin-storage
          mountPath: /var/lib/pgadmin
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:8.11
        securityContext:
          runAsUser: 5050
          runAsGroup: 5050
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          valueFrom:
            secretKeyRef:
              name: pgadmin-credentials
              key: email
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: pgadmin-credentials
              key: password
        - name: PGADMIN_DISABLE_POSTFIX
          value: "true"
        - name: PGADMIN_LISTEN_PORT
          value: "8080"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: pgadmin-storage
          mountPath: /var/lib/pgadmin
        livenessProbe:
          httpGet:
            path: /misc/ping
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /misc/ping
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: pgadmin-storage
        persistentVolumeClaim:
          claimName: pgadmin-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin-service
  namespace: postgres
  labels:
    app: pgadmin
spec:
  selector:
    app: pgadmin
  ports:
    - port: 80
      targetPort: 8080
      name: http
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pgadmin-ingress
  namespace: postgres
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - pgadmin.devsecops.net.au
    secretName: pgadmin-tls
  rules:
  - host: pgadmin.devsecops.net.au
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pgadmin-service
            port:
              number: 80
